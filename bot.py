import json
import asyncio
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import ChatNotFound, BadRequest
from keep_alive import keep_alive  # рждрзЛржорж╛рж░ рж╕рж╛рж░рзНржнрж╛рж░ рж▓рж╛ржЗржн рж░рж╛ржЦрзЗ

TOKEN = "8063018135:AAHjhTK_F9oLDX3kUCh2krJRjXfYwGBShnQ"
ADMIN_ID = 7647930808  # рждрзЛржорж╛рж░ ржЖржЗржбрж┐

GROUPS = {
    "Group 1": "https://t.me/CashShortcutBD",
    "Group 2": "https://t.me/EarningZone0BD",
    "Group 3": "https://t.me/EarnopediaBD"
}

GROUP_IDS = [
    "-1002676258756",
    "-1002657235869",
    "-1002414769217"
]

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
DB_FILE = "database.json"


def load_db():
    if not os.path.exists(DB_FILE):
        return {"users": {}, "claimed_50": [], "joined_users": []}
    try:
        with open(DB_FILE, "r") as f:
            return json.load(f)
    except Exception:
        return {"users": {}, "claimed_50": [], "joined_users": []}


def save_db(data):
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=2)


def format_profile(uid, data):
    user = data["users"].get(str(uid), {})
    name = user.get("name", "ржЕржЬрж╛ржирж╛")
    balance = user.get("balance", 0)
    referrals = user.get("referrals", 0)
    joined = user.get("joined", "N/A")

    text = (
        f"ЁЯСд ржирж╛ржо: {name}\n"
        f"ЁЯЖФ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {uid}\n"
        f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {balance} ржЯрж╛ржХрж╛\n"
        f"тЬЕ рж╕ржлрж▓ рж░рзЗржлрж╛рж░: {referrals}\n"
        f"ЁЯУЕ ржЬрзЯрзЗржи рждрж╛рж░рж┐ржЦ: {joined}"
    )
    return text


def get_referral_link(user_id):
    return f"https://t.me/Student_Refer_bot?start={user_id}"


def main_menu_buttons():
    return InlineKeyboardMarkup(row_width=3).add(
        InlineKeyboardButton("ЁЯУД ржкрзНрж░рзЛржлрж╛ржЗрж▓", callback_data="profile"),
        InlineKeyboardButton("ЁЯУг рж░рзЗржлрж╛рж░", callback_data="refer"),
        InlineKeyboardButton("ЁЯТ│ ржЙрждрзНрждрзЛрж▓ржи", callback_data="withdraw"),
        InlineKeyboardButton("ЁЯОБ ржлрзНрж░рж┐ рзлрзж ржЯрж╛ржХрж╛", callback_data="free50"),
        InlineKeyboardButton("ЁЯУв ржирзЛржЯрж┐рж╢", callback_data="notice"),
        InlineKeyboardButton("ЁЯЖШ рж╕рж╛ржкрзЛрж░рзНржЯ", callback_data="support")
    )


@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    uid = str(msg.from_user.id)
    name = msg.from_user.full_name
    data = load_db()

    # ржирждрзБржи ржЗржЙржЬрж╛рж░ рж╣рж▓рзЗ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ ржпрзБржХрзНржд ржХрж░рзЛ (рж░рзЗржлрж╛рж░рзЗрж▓ ржЪрзЗржХ рж╕рж╣)
    if uid not in data["users"]:
        ref = msg.get_args()
        if ref and ref != uid and ref in data["users"]:
            data["users"][ref]["referrals"] = data["users"][ref].get("referrals", 0) + 1
            data["users"][ref]["balance"] = data["users"][ref].get("balance", 0) + 50

        data["users"][uid] = {
            "name": name,
            "balance": 0,
            "joined": datetime.now().strftime("%Y-%m-%d"),
            "referrals": 0
        }
        save_db(data)

    # ржпржжрж┐ ржЬрзЯрзЗржи ржерж╛ржХрзЗ, рж╕рж░рж╛рж╕рж░рж┐ ржорзЗржирзБ ржжрзЗржЦрж╛ржУ
    if uid in data.get("joined_users", []):
        profile_text = format_profile(uid, data)
        menu_text = (
            f"рж╕рзНржмрж╛ржЧрждржо, {name}!\n\n"
            f"{profile_text}\n\n"
            "ржирзАржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржи:"
        )
        await msg.answer(menu_text, reply_markup=main_menu_buttons())
        return

    # ржЬрзЯрзЗржи ржХрж░рждрзЗ рж╣ржмрзЗ, рждрж╛ржЗ ржЧрзНрж░рзБржк рж▓рж┐ржВржХ ржмрж╛ржЯржи ржЖрж░ JOINED DONE ЁЯСНЁЯП╗ ржПржХрж╕рж╛ржерзЗ ржжрзЗржЦрж╛ржУ
    group_buttons = [InlineKeyboardButton(text=name, url=url) for name, url in GROUPS.items()]
    group_buttons.append(InlineKeyboardButton("JOINED DONE ЁЯСНЁЯП╗", callback_data="check_join"))
    keyboard = InlineKeyboardMarkup(row_width=1).add(*group_buttons)

    await msg.answer(
        f"ржкрзНрж░рж┐ржпрж╝ {name}, ржирж┐ржЪрзЗрж░ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛрждрзЗ ржЬрзЯрзЗржи ржХрж░рзБржи ржПржмржВ рждрж╛рж░ржкрж░ 'JOINED DONE ЁЯСНЁЯП╗' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред",
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data == "check_join")
async def check_join_handler(call: types.CallbackQuery):
    uid = call.from_user.id
    uid_str = str(uid)
    data = load_db()

    not_joined = []
    for gid in GROUP_IDS:
        try:
            member = await bot.get_chat_member(gid, uid)
            if member.status not in ["member", "administrator", "creator"]:
                not_joined.append(gid)
        except (ChatNotFound, BadRequest):
            not_joined.append(gid)

    if not_joined:
        await call.answer("тЭМ ржЖржкржирж┐ ржПржЦржиржУ рж╕ржм ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи рж╣ржиржирж┐ред ржжрзЯрж╛ ржХрж░рзЗ рж╕ржм ржЧрзНрж░рзБржк ржЬрзЯрзЗржи ржХрж░рзБржиред", show_alert=True)
        return

    # ржЬрзЯрзЗржи ржирж┐рж╢рзНржЪрж┐ржд, ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ ржпрзБржХрзНржд ржХрж░рзЛ
    if uid_str not in data.get("joined_users", []):
        data.setdefault("joined_users", []).append(uid_str)
        save_db(data)

    profile_text = format_profile(uid_str, data)
    menu_text = (
        f"тЬЕ рж╢рзБржнржХрж╛ржоржирж╛ {call.from_user.full_name}, ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржм ржЧрзНрж░рзБржк ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗржи!\n\n"
        f"{profile_text}\n\n"
        "ржирзАржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржи:"
    )
    await call.message.edit_text(menu_text, reply_markup=main_menu_buttons())


@dp.callback_query_handler(lambda c: c.data == "profile")
async def profile_handler(call: types.CallbackQuery):
    data = load_db()
    profile_text = format_profile(str(call.from_user.id), data)
    await call.message.edit_text(profile_text, reply_markup=main_menu_buttons())


@dp.callback_query_handler(lambda c: c.data == "refer")
async def refer_handler(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    referrals = data["users"].get(uid, {}).get("referrals", 0)
    link = get_referral_link(uid)
    text = (
        f"ЁЯУг ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржЩрзНржХ:\n{link}\n\n"
        f"тЬЕ рж╕ржлрж▓ рж░рзЗржлрж╛рж░: {referrals}"
    )
    await call.message.edit_text(text, reply_markup=main_menu_buttons())


user_withdraw_state = {}


@dp.callback_query_handler(lambda c: c.data == "withdraw")
async def withdraw_handler(call: types.CallbackQuery):
    uid = str(call.from_user.id)
    data = load_db()
    user = data["users"].get(uid, {})
    if user.get("referrals", 0) < 20:
        await call.answer("тЭЧ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЬржирзНржп ржЕржирзНрждржд рзирзжржЯрж┐ рж░рзЗржлрж╛рж░ рж▓рж╛ржЧржмрзЗред", show_alert=True)
        return

    await call.message.answer("ЁЯУе ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржмрж┐ржХрж╛рж╢/ржиржЧржж ржиржорзНржмрж░ ржкрж╛ржарж╛ржи:")
    user_withdraw_state[uid] = True


@dp.message_handler()
async def handle_withdraw_number(msg: types.Message):
    uid = str(msg.from_user.id)
    if user_withdraw_state.get(uid):
        data = load_db()
        user = data["users"][uid]
        await bot.send_message(
            ADMIN_ID,
            f"ЁЯУд ржЙрждрзНрждрзЛрж▓ржи рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ\nржирж╛ржо: {msg.from_user.full_name}\nID: {uid}\nржиржорзНржмрж░: {msg.text}\nржкрж░рж┐ржорж╛ржг: {user['balance']} ржЯрж╛ржХрж╛"
        )
        user["balance"] = 0
        save_db(data)
        await msg.answer("тЬЕ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        user_withdraw_state.pop(uid)


@dp.callback_query_handler(lambda c: c.data == "free50")
async def free50_handler(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    if uid in data.get("claimed_50", []):
        await call.answer("тЭМ ржЖржкржирж┐ ржПржЗ ржЕржлрж╛рж░ржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржЧрзНрж░рж╣ржг ржХрж░рзЗржЫрзЗржиред", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("ЁЯМР Visit Website", url="http://invest-sure.netlify.app"),
        InlineKeyboardButton("тЬЕ Submit", callback_data="submit_50")
    )
    await call.message.edit_text("ЁЯОБ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржЧрж┐ржпрж╝рзЗ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рж╕ржорзНржкржирзНржи ржХрж░рзЗ Submit ржжрж┐ржи:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "submit_50")
async def submit_50_handler(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    if uid in data.get("claimed_50", []):
        await call.answer("тЭМ ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржХрзНрж▓рзЗржЗржо ржХрж░рзЗржЫрзЗржиред", show_alert=True)
        return

    data.setdefault("claimed_50", []).append(uid)
    data["users"][uid]["balance"] += 50
    save_db(data)
    await call.message.edit_text("ЁЯОЙ рж╕ржлрж▓ржнрж╛ржмрзЗ рзлрзж ржЯрж╛ржХрж╛ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ ржпрзЛржЧ рж╣ржпрж╝рзЗржЫрзЗ!", reply_markup=main_menu_buttons())


@dp.callback_query_handler(lambda c: c.data == "notice")
async def notice_handler(call: types.CallbackQuery):
    text = (
        "ЁЯУв *ржирзЛржЯрж┐рж╢:*\n\n"
        "тЬЕ рж░рзЗржлрж╛рж░ ржкрзНрж░рждрж┐ рзлрзж ржЯрж╛ржХрж╛ ржХрж░рзЗ ржЗржиржХрж╛ржо\n"
        "тЬЕ рзирзж рж░рзЗржлрж╛рж░ рж╣рж▓рзЗржЗ ржЙрждрзНрждрзЛрж▓ржи\n"
        "тЬЕ ржкрзНрж░рждрж┐ржжрж┐ржи ржирждрзБржи ржЕржлрж╛рж░ ржУ ржЖржкржбрзЗржЯ\n\n"
        "тП░ рж╕ржХрзНрж░рж┐ржпрж╝ ржерж╛ржХрзБржи ржПржмржВ ржЗржиржХрж╛ржо ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржи!"
    )
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=main_menu_buttons())


@dp.callback_query_handler(lambda c: c.data == "support")
async def support_handler(call: types.CallbackQuery):
    await call.message.edit_text(
        "ЁЯЖШ *рж╕рж╛ржкрзЛрж░рзНржЯрзЗрж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи:*\n\n"
        "ЁЯУй Telegram: @CashShortcutAdmin",
        parse_mode="Markdown",
        reply_markup=main_menu_buttons()
    )


if __name__ == "__main__":
    keep_alive()  # ржпржжрж┐ ржЖржкржирж┐ Repl.it ржП ржЪрж╛рж▓рж╛ржи, ржирж╛ рж╣рж▓рзЗ рж╕рж░рж╛рждрзЗ ржкрж╛рж░рзЗржи
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
