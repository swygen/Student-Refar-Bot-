import json
import asyncio
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from keep_alive import keep_alive  # Uptime server (ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ)

# ==== Bot Configuration ====
TOKEN = "7581535746:AAEAe2dhpkVdfaJnDVS526hFRAGL0rLf3vI"  # рждрзЛржорж╛рж░ ржмржЯ ржЯрзЛржХрзЗржи ржмрж╕рж╛ржУ
ADMIN_ID = 7647930808  # рждрзЛржорж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЖржЗржбрж┐ ржмрж╕рж╛ржУ

GROUPS = {
    "CashShortcutBD": "https://t.me/CashShortcutBD",
    "EarningZone0BD": "https://t.me/EarningZone0BD",
    "EarnopediaBD": "https://t.me/EarnopediaBD"
}

GROUP_IDS = [
    "-1002676258756",
    "-1002657235869",
    "-1002414769217"
]

# ржЧрзНрж░рзБржк ржЖржЗржбрж┐ ржУ ржирж╛ржо ржорзНржпрж╛ржк (ржЧрзНрж░рзБржк ржпрж╛ржЪрж╛ржЗрзЯрзЗрж░ рж╕ржорзЯ ржмрзНржпржмрж╣рж╛рж░ рж╣ржмрзЗ)
GROUP_MAP = {
    "-1002676258756": "CashShortcutBD",
    "-1002657235869": "EarningZone0BD",
    "-1002414769217": "EarnopediaBD"
}

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
DB_FILE = "database.json"

# ==== Database Operations ====
def load_db():
    if not os.path.exists(DB_FILE):
        return {"users": {}, "claimed_100": []}
    try:
        with open(DB_FILE, "r") as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {"users": {}, "claimed_100": []}

def save_db(data):
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=2)

def get_referral_link(user_id):
    return f"https://t.me/Student_refer_bot?start={user_id}"

def format_profile(uid, data):
    u = data["users"].get(str(uid), {})
    return f"""ЁЯСд ржирж╛ржо: {u.get("name", "ржЕржЬрж╛ржирж╛")}
ЁЯЖФ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {uid}
ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {u.get("balance", 0)} ржЯрж╛ржХрж╛
ЁЯУЕ ржЬрзЯрзЗржи рждрж╛рж░рж┐ржЦ: {u.get("joined", "N/A")}"""

# ==== Bot Commands ====
@dp.message_handler(commands=['start'])
async def start_command(msg: types.Message):
    uid = str(msg.from_user.id)
    data = load_db()

    if uid not in data["users"]:
        ref = msg.get_args()
        if ref and ref != uid and ref in data["users"]:
            data["users"][ref]["referrals"] = data["users"][ref].get("referrals", 0) + 1
            data["users"][ref]["balance"] = data["users"][ref].get("balance", 0) + 50

        data["users"][uid] = {
            "name": msg.from_user.full_name,
            "balance": 0,
            "joined": datetime.now().strftime("%Y-%m-%d"),
            "referrals": 0
        }
        save_db(data)

    buttons = [InlineKeyboardButton(text=name, url=url) for name, url in GROUPS.items()]
    buttons.append(InlineKeyboardButton("тЬЕ Continue ЁЯЯв", callback_data="check_groups"))
    keyboard = InlineKeyboardMarkup(row_width=1).add(*buttons)

    await msg.answer("ЁЯФ░ ржкрзНрж░ржержорзЗ ржирж┐ржЪрзЗрж░ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛрждрзЗ ржпрзЛржЧ ржжрж┐ржи:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "check_groups")
async def check_groups(call: types.CallbackQuery):
    user_id = call.from_user.id
    not_joined_groups = []

    for gid in GROUP_IDS:
        try:
            member = await bot.get_chat_member(gid, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                not_joined_groups.append(gid)
        except Exception:
            not_joined_groups.append(gid)

    if not_joined_groups:
        groups_names = [GROUP_MAP.get(gid, "ржЕржЬрж╛ржирж╛ ржЧрзНрж░рзБржк") for gid in not_joined_groups]
        await call.message.edit_text(
            "тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ рж╕ржмржЧрзБрж▓рзЛ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзБржи ржПржмржВ ржкрзБржирж░рж╛ржпрж╝ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:\n" +
            "\n".join(f"тАв {name}" for name in groups_names)
        )
    else:
        keyboard = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("ЁЯУД ржкрзНрж░рзЛржлрж╛ржЗрж▓", callback_data="profile"),
            InlineKeyboardButton("ЁЯУг рж░рзЗржлрж╛рж░", callback_data="refer"),
            InlineKeyboardButton("ЁЯТ│ ржЙрждрзНрждрзЛрж▓ржи", callback_data="withdraw"),
            InlineKeyboardButton("ЁЯОБ ржлрзНрж░рж┐ рзлрзж ржЯрж╛ржХрж╛", callback_data="free100"),
            InlineKeyboardButton("ЁЯУв ржирзЛржЯрж┐рж╢", callback_data="notice"),
            InlineKeyboardButton("ЁЯЖШ рж╕рж╛ржкрзЛрж░рзНржЯ", callback_data="support")
        )
        await call.message.edit_text("тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗржи! ржорзЗржирзБ ржерзЗржХрзЗ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржи:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "profile")
async def profile(call: types.CallbackQuery):
    data = load_db()
    await call.message.edit_text(format_profile(call.from_user.id, data))

@dp.callback_query_handler(lambda c: c.data == "refer")
async def refer(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    link = get_referral_link(uid)
    referrals = data["users"][uid].get("referrals", 0)
    await call.message.edit_text(f"ЁЯУг рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ: ЁЯФЧ {link}\nтЬЕ рж╕ржлрж▓ рж░рзЗржлрж╛рж░: {referrals}")

user_withdraw_state = {}

@dp.callback_query_handler(lambda c: c.data == "withdraw")
async def withdraw(call: types.CallbackQuery):
    uid = str(call.from_user.id)
    data = load_db()
    user = data["users"].get(uid, {})
    if user.get("referrals", 0) < 20:
        await call.message.edit_text("тЭЧ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЬржирзНржп ржЕржирзНрждржд рзирзжржЯрж┐ рж░рзЗржлрж╛рж░ рж▓рж╛ржЧржмрзЗред")
    else:
        await call.message.answer("ЁЯУе ржЖржкржирж╛рж░ ржмрж┐ржХрж╛рж╢/ржиржЧржж ржиржорзНржмрж░ ржкрж╛ржарж╛ржи:")
        user_withdraw_state[uid] = True

@dp.message_handler()
async def handle_number(msg: types.Message):
    uid = str(msg.from_user.id)
    if user_withdraw_state.get(uid):
        data = load_db()
        user = data["users"][uid]
        await bot.send_message(
            ADMIN_ID,
            f"ЁЯУд ржЙрждрзНрждрзЛрж▓ржи рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ\nржирж╛ржо: {msg.from_user.full_name}\nID: {uid}\nржиржорзНржмрж░: {msg.text}\nржкрж░рж┐ржорж╛ржг: {user['balance']} ржЯрж╛ржХрж╛"
        )
        user["balance"] = 0
        save_db(data)
        await msg.answer("тЬЕ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        user_withdraw_state.pop(uid)

@dp.callback_query_handler(lambda c: c.data == "notice")
async def notice(call: types.CallbackQuery):
    await call.message.edit_text("ЁЯУМ ржирж┐ржпрж╝ржорж┐рждржнрж╛ржмрзЗ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛрждрзЗ рж╕ржХрзНрж░рж┐ржпрж╝ ржерж╛ржХрзБржиред")

@dp.callback_query_handler(lambda c: c.data == "support")
async def support(call: types.CallbackQuery):
    await call.message.edit_text("ЁЯЖШ рж╕рж╛ржкрзЛрж░рзНржЯрзЗрж░ ржЬржирзНржп ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: @YourSupportUsername")

@dp.callback_query_handler(lambda c: c.data == "free100")
async def free100(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    if uid in data["claimed_100"]:
        await call.message.edit_text("тЭМ ржЖржкржирж┐ ржПржЗ ржЕржлрж╛рж░ржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржЧрзНрж░рж╣ржг ржХрж░рзЗржЫрзЗржиред")
        return

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("ЁЯМР Visit Website", url="http://invest-sure.netlify.app"),
        InlineKeyboardButton("тЬЕ Submit", callback_data="submit100")
    )
    await call.message.answer("ЁЯОБ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржЧрж┐ржпрж╝рзЗ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рж╕ржорзНржкржирзНржи ржХрж░рзЗ Submit ржжрж┐ржи:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "submit100")
async def submit100(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    if uid in data["claimed_100"]:
        await call.message.edit_text("тЭМ ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржХрзНрж▓рзЗржЗржо ржХрж░рзЗржЫрзЗржиред")
        return

    data["claimed_100"].append(uid)
    data["users"][uid]["balance"] += 50
    save_db(data)
    await call.message.edit_text("тЬЕ рзлрзж ржЯрж╛ржХрж╛ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ ржпрзЛржЧ рж╣ржпрж╝рзЗржЫрзЗред")

# ==== Start Bot ====
if __name__ == "__main__":
    keep_alive()  # ржпржжрж┐ рж░рзЗржкрзНрж▓рж┐ржЯ ржмрж╛ ржЕржирзНржп рж╕рж╛рж░рзНржнрж╛рж░ ржЗржЙржЬ ржХрж░рзЛ, ржирж╛ рж╣рж▓рзЗ ржмрж╛ржж ржжрж┐ржУ

    loop = asyncio.get_event_loop()

    async def main():
        print("ЁЯдЦ Bot is running...")
        await dp.start_polling()

    loop.create_task(main())
    loop.run_forever()
