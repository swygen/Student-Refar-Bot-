import json
import asyncio
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from keep_alive import keep_alive  # ржпржжрж┐ рждрзЛржорж╛рж░ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ ржерж╛ржХрзЗ

# ==== Bot Configuration ====
TOKEN = "8068195499:AAGDIel94FTmiXRLe-TGwVJI63GW1y03qxo"  # рждрзЛржорж╛рж░ ржмржЯ ржЯрзЛржХрзЗржи
ADMIN_ID = 7647930808  # рждрзЛржорж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЖржЗржбрж┐

GROUP_IDS = [
    "-1002676258756",
    "-1002657235869",
    "-1002414769217"
]

GROUP_MAP = {
    "-1002676258756": "CashShortcutBD",
    "-1002657235869": "EarningZone0BD",
    "-1002414769217": "EarnopediaBD"
}

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
DB_FILE = "database.json"


# ==== Database Operations ====
def load_db():
    if not os.path.exists(DB_FILE):
        return {"users": {}, "claimed_50": [], "joined_users": []}
    try:
        with open(DB_FILE, "r") as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {"users": {}, "claimed_50": [], "joined_users": []}


def save_db(data):
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=2)


def format_profile(uid, data):
    user = data["users"].get(str(uid), {})
    name = user.get("name", "ржЕржЬрж╛ржирж╛")
    balance = user.get("balance", 0)
    referrals = user.get("referrals", 0)
    joined = user.get("joined", "N/A")

    text = (
        f"ЁЯСд ржирж╛ржо: {name}\n"
        f"ЁЯЖФ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {uid}\n"
        f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {balance} ржЯрж╛ржХрж╛\n"
        f"ЁЯУЕ ржЬрзЯрзЗржи рждрж╛рж░рж┐ржЦ: {joined}\n"
        f"тЬЕ рж╕ржлрж▓ рж░рзЗржлрж╛рж░: {referrals}"
    )
    return text


def get_referral_link(user_id):
    return f"https://t.me/Student_Refer_bot?start={user_id}"


# ==== Handlers ====

@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    uid = str(msg.from_user.id)
    name = msg.from_user.full_name
    data = load_db()

    # ржЗржЙржЬрж╛рж░ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ ржирж╛ ржерж╛ржХрж▓рзЗ ржпрзЛржЧ ржХрж░рзЛ
    if uid not in data["users"]:
        ref = msg.get_args()
        if ref and ref != uid and ref in data["users"]:
            data["users"][ref]["referrals"] = data["users"][ref].get("referrals", 0) + 1
            data["users"][ref]["balance"] = data["users"][ref].get("balance", 0) + 50

        data["users"][uid] = {
            "name": name,
            "balance": 0,
            "joined": datetime.now().strftime("%Y-%m-%d"),
            "referrals": 0
        }
        save_db(data)

    # ржпржжрж┐ ржЗржЙржЬрж╛рж░ ржЖржЧрзЗржЗ ржЧрзНрж░рзБржк ржЬрзЯрзЗржи ржХрж░рзЗ ржерж╛ржХрзЗ, ржЖрж░ join check рж╣рзЯрзЗ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржорзЗржирзБ ржжрзЗржЦрж╛ржУ
    if uid in data.get("joined_users", []):
        profile_text = format_profile(uid, data)
        menu_text = (
            f"рж╕рзНржмрж╛ржЧрждржо, {name}!\n\n"
            f"{profile_text}\n\n"
            "ЁЯУД ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржжрзЗржЦрждрзЗ /profile\n"
            "ЁЯУг рж░рзЗржлрж╛рж░ ржХрж░рждрзЗ /refer\n"
            "ЁЯТ│ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ /withdraw\n"
            "ЁЯОБ ржлрзНрж░рж┐ рзлрзж ржЯрж╛ржХрж╛ ржкрзЗрждрзЗ /free50\n"
            "ЁЯУв ржирзЛржЯрж┐рж╢ ржкрзЗрждрзЗ /notice\n"
            "ЁЯЖШ рж╕рж╛ржкрзЛрж░рзНржЯ ржкрзЗрждрзЗ /support"
        )
        await msg.answer(menu_text)
        return

    # ржЧрзНрж░рзБржк ржЬрзЯрзЗржи ржЪрзЗржХ ржХрж░рзЛ
    not_joined = []
    for gid in GROUP_IDS:
        try:
            member = await bot.get_chat_member(gid, msg.from_user.id)
            if member.status not in ["member", "administrator", "creator"]:
                not_joined.append(GROUP_MAP.get(gid, "ржЕржЬрж╛ржирж╛ ржЧрзНрж░рзБржк"))
        except Exception:
            not_joined.append(GROUP_MAP.get(gid, "ржЕржЬрж╛ржирж╛ ржЧрзНрж░рзБржк"))

    if not_joined:
        await msg.answer(
            f"ржкрзНрж░рж┐ржпрж╝ {name}, ржЖржкржирж┐ ржирж┐ржЪрзЗрж░ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛрждрзЗ ржЬрзЯрзЗржи ржХрж░рзБржи:\n" +
            "\n".join(f"тАв {g}" for g in not_joined) +
            "\n\nржЬрзЯрзЗржи ржХрж░рж╛рж░ ржкрж░ ржЖржмрж╛рж░ /start ржжрж┐ржиред"
        )
        return

    # ржЬрзЯрзЗржи ржЪрзЗржХ рж╕ржлрж▓ рж╣рж▓рзЗ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ ржпрзЛржЧ ржХрж░рзЛ
    if uid not in data.get("joined_users", []):
        data.setdefault("joined_users", []).append(uid)
        save_db(data)

    profile_text = format_profile(uid, data)
    menu_text = (
        f"ржзржирзНржпржмрж╛ржж {name}, ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржм ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗржи!\n\n"
        f"{profile_text}\n\n"
        "ЁЯУД ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржжрзЗржЦрждрзЗ /profile\n"
        "ЁЯУг рж░рзЗржлрж╛рж░ ржХрж░рждрзЗ /refer\n"
        "ЁЯТ│ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ /withdraw\n"
        "ЁЯОБ ржлрзНрж░рж┐ рзлрзж ржЯрж╛ржХрж╛ ржкрзЗрждрзЗ /free50\n"
        "ЁЯУв ржирзЛржЯрж┐рж╢ ржкрзЗрждрзЗ /notice\n"
        "ЁЯЖШ рж╕рж╛ржкрзЛрж░рзНржЯ ржкрзЗрждрзЗ /support"
    )
    await msg.answer(menu_text)


@dp.message_handler(commands=["profile"])
async def profile_handler(msg: types.Message):
    uid = str(msg.from_user.id)
    data = load_db()
    profile_text = format_profile(uid, data)
    await msg.answer(profile_text)


@dp.message_handler(commands=["refer"])
async def refer_handler(msg: types.Message):
    uid = str(msg.from_user.id)
    data = load_db()
    referrals = data["users"].get(uid, {}).get("referrals", 0)
    link = get_referral_link(uid)
    await msg.answer(
        f"ЁЯУг ржкрзНрж░рж┐ржпрж╝ {msg.from_user.full_name},\n"
        f"рждрзЛржорж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ: {link}\n"
        f"тЬЕ рж╕ржлрж▓ рж░рзЗржлрж╛рж░: {referrals} ржЬржи"
    )


user_withdraw_state = set()


@dp.message_handler(commands=["withdraw"])
async def withdraw_handler(msg: types.Message):
    uid = str(msg.from_user.id)
    data = load_db()
    user = data["users"].get(uid, {})
    if user.get("referrals", 0) < 20:
        await msg.answer(
            f"тЭЧ ржкрзНрж░рж┐ржпрж╝ {msg.from_user.full_name}, ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЬржирзНржп ржЕржирзНрждржд рзирзж ржЬржи рж░рзЗржлрж╛рж░ рж▓рж╛ржЧржмрзЗред "
            f"ржЖржкржирж╛рж░ рж╕ржлрж▓ рж░рзЗржлрж╛рж░ рж╕ржВржЦрзНржпрж╛: {user.get('referrals', 0)}"
        )
    elif user.get("balance", 0) <= 0:
        await msg.answer(f"тЭЧ ржкрзНрж░рж┐ржпрж╝ {msg.from_user.full_name}, ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ рж╢рзВржирзНржпред")
    else:
        await msg.answer("ЁЯУе ржмрж┐ржХрж╛рж╢/ржиржЧржж ржиржорзНржмрж░ ржкрж╛ржарж╛ржи:")
        user_withdraw_state.add(uid)


@dp.message_handler()
async def process_withdraw_number(msg: types.Message):
    uid = str(msg.from_user.id)
    if uid in user_withdraw_state:
        data = load_db()
        user = data["users"].get(uid, {})
        amount = user.get("balance", 0)

        if amount <= 0:
            await msg.answer("тЭЧ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ рж╢рзВржирзНржп ржмрж╛ ржЕржмрзИржзред")
            user_withdraw_state.discard(uid)
            return

        text = (
            f"ЁЯУд ржирждрзБржи ржЙрждрзНрждрзЛрж▓ржи рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ:\n"
            f"ржирж╛ржо: {msg.from_user.full_name}\n"
            f"ID: {uid}\n"
            f"ржмрж┐ржХрж╛рж╢/ржиржЧржж ржиржорзНржмрж░: {msg.text}\n"
            f"ржкрж░рж┐ржорж╛ржг: {amount} ржЯрж╛ржХрж╛"
        )
        await bot.send_message(ADMIN_ID, text)
        user["balance"] = 0
        save_db(data)
        await msg.answer("тЬЕ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржзржирзНржпржмрж╛ржж!")
        user_withdraw_state.discard(uid)


@dp.message_handler(commands=["free50"])
async def free50_handler(msg: types.Message):
    uid = str(msg.from_user.id)
    data = load_db()

    if uid in data.get("claimed_50", []):
        await msg.answer("тЭМ ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржлрзНрж░рж┐ рзлрзж ржЯрж╛ржХрж╛ ржХрзНрж▓рзЗржЗржо ржХрж░рзЗржЫрзЗржиред")
        return

    # ржПржЦрж╛ржирзЗ ржУрзЯрзЗржмрж╕рж╛ржЗржЯ рж▓рж┐ржВржХ ржжрзЗржЦрж╛ржУ ржПржмржВ ржХрзНрж▓рзЗржЗржо ржХрж░рж╛рж░ ржирж┐рж░рзНржжрзЗрж╢ ржжрж╛ржУ
    text = (
        f"ЁЯОБ ржкрзНрж░рж┐ржпрж╝ {msg.from_user.full_name}, ржлрзНрж░рж┐ рзлрзж ржЯрж╛ржХрж╛ ржкрзЗрждрзЗ ржирж┐ржЪрзЗрж░ ржУрзЯрзЗржмрж╕рж╛ржЗржЯрзЗ ржЧрж┐рзЯрзЗ "
        "рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рж╕ржорзНржкржирзНржи ржХрж░рзБржиред\n\n"
        "ржУрзЯрзЗржмрж╕рж╛ржЗржЯ: http://invest-sure.netlify.app\n\n"
        "рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рж╢рзЗрж╖ рж╣рж▓рзЗ ржирж┐ржЪрзЗрж░ ржХржорж╛ржирзНржб ржжрж┐рзЯрзЗ ржХрзНрж▓рзЗржЗржо ржХрж░рзБржи:\n"
        "/claim50"
    )
    await msg.answer(text)


@dp.message_handler(commands=["claim50"])
async def claim50_handler(msg: types.Message):
    uid = str(msg.from_user.id)
    data = load_db()

    if uid in data.get("claimed_50", []):
        await msg.answer("тЭМ ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржлрзНрж░рж┐ рзлрзж ржЯрж╛ржХрж╛ ржХрзНрж▓рзЗржЗржо ржХрж░рзЗржЫрзЗржиред")
        return

    data.setdefault("claimed_50", []).append(uid)
    if uid in data["users"]:
        data["users"][uid]["balance"] = data["users"][uid].get("balance", 0) + 50
    else:
        data["users"][uid] = {
            "name": msg.from_user.full_name,
            "balance": 50,
            "joined": datetime.now().strftime("%Y-%m-%d"),
            "referrals": 0
        }
    save_db(data)

    await msg.answer(
        f"тЬЕ ржкрзНрж░рж┐ржпрж╝ {msg.from_user.full_name}, ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ рзлрзж ржЯрж╛ржХрж╛ ржпрзЛржЧ рж╣ржпрж╝рзЗржЫрзЗ!"
    )


@dp.message_handler(commands=["notice"])
async def notice_handler(msg: types.Message):
    await msg.answer(
        "ЁЯУв ржирж┐ржпрж╝ржорж┐рждржнрж╛ржмрзЗ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛрждрзЗ рж╕ржХрзНрж░рж┐ржпрж╝ ржерж╛ржХрзБржи ржПржмржВ ржирждрзБржи ржЖржкржбрзЗржЯ ржкрзЗрждрзЗ ржЖржорж╛ржжрзЗрж░ рж╕ржЩрзНржЧрзЗ ржерж╛ржХрзБржиред"
    )


@dp.message_handler(commands=["support"])
async def support_handler(msg: types.Message):
    await msg.answer(
        "ЁЯЖШ рж╕рж╛ржкрзЛрж░рзНржЯрзЗрж░ ржЬржирзНржп ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: @CashShortcutAdmin"
    )


# ==== Start Bot ====
if __name__ == "__main__":
    keep_alive()  # ржпржжрж┐ ржжрж░ржХрж╛рж░ ржирж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржорзБржЫрзЗ ржлрзЗрж▓рзЛ

    loop = asyncio.get_event_loop()

    async def main():
        print("ЁЯдЦ Bot is running...")
        await dp.start_polling()

    loop.create_task(main())
    loop.run_forever()
