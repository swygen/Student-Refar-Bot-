import json
import asyncio
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from keep_alive import keep_alive  # ‡¶Ø‡¶¶‡¶ø Replit ‡¶¨‡¶æ ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì

# üîê Bot Configuration
TOKEN = "8147835055:AAH9L0JFtwZLPx6mJ37eyxnDUxM49bgnfm8"  # <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ BotFather ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶∏‡¶æ‡¶ì
ADMIN_ID = 7647930808  # <-- ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Telegram ID
GROUP_IDS = ['-1002414769217', '-1002676258756', '-1002657235869']

# ü§ñ Initialize Bot and Dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# üìÅ Database
DB_FILE = "database.json"

def load_db():
    if not os.path.exists(DB_FILE):
        return {"users": {}, "claimed_100": []}
    try:
        with open(DB_FILE, "r") as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {"users": {}, "claimed_100": []}

def save_db(data):
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=2)

def get_referral_link(user_id):
    return f"https://t.me/Student_refer_bot?start={user_id}"

def user_profile(uid, data):
    u = data["users"].get(str(uid), {})
    return f"""üë§ ‡¶®‡¶æ‡¶Æ: {u.get("name")}
üÜî ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: {uid}
üí∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {u.get("balance", 0)} ‡¶ü‡¶æ‡¶ï‡¶æ
üìÖ ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {u.get("joined")}
"""

@dp.message_handler(commands=['start'])
async def start_cmd(msg: types.Message):
    uid = str(msg.from_user.id)
    data = load_db()

    if uid not in data["users"]:
        ref = msg.get_args()
        if ref and ref != uid and ref in data["users"]:
            data["users"][ref]["referrals"] = data["users"][ref].get("referrals", 0) + 1
            data["users"][ref]["balance"] = data["users"][ref].get("balance", 0) + 50

        data["users"][uid] = {
            "name": msg.from_user.full_name,
            "balance": 0,
            "joined": datetime.now().strftime("%Y-%m-%d"),
            "referrals": 0
        }
        save_db(data)

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ Joined üü¢", callback_data="check_groups")
    )
    await msg.answer("üéâ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶§‡¶ø‡¶®‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "check_groups")
async def check_groups(call: types.CallbackQuery):
    user_id = call.from_user.id
    try:
        for gid in GROUP_IDS:
            member = await bot.get_chat_member(gid, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                raise Exception()

        keyboard = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤", callback_data="profile"),
            InlineKeyboardButton("‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="refer"),
            InlineKeyboardButton("‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="withdraw"),
            InlineKeyboardButton("‡¶®‡ßã‡¶ü‡¶ø‡¶∂", callback_data="notice"),
            InlineKeyboardButton("‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü", callback_data="support"),
            InlineKeyboardButton("‡¶´‡ßç‡¶∞‡¶ø ‡ßß‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ", callback_data="free100")
        )
        await call.message.edit_text("‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®!", reply_markup=keyboard)
    except:
        await call.message.edit_text("‚ùó ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßã‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

@dp.callback_query_handler(lambda c: c.data == "profile")
async def profile(call: types.CallbackQuery):
    data = load_db()
    await call.message.edit_text(user_profile(call.from_user.id, data))

@dp.callback_query_handler(lambda c: c.data == "refer")
async def refer(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    u = data["users"][uid]
    link = get_referral_link(uid)
    await call.message.edit_text(f"""üì£ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶´‡¶≤ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá ‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®!

üîó ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï: {link}

‚úÖ ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶´‡¶≤ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞: {u.get('referrals', 0)} """)

@dp.callback_query_handler(lambda c: c.data == "withdraw")
async def withdraw(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    u = data["users"][uid]

    if u.get("referrals", 0) < 20:
        await call.message.edit_text("‚ùó ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡ß®‡ß¶‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡•§")
    else:
        await call.message.answer("üí≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂/‡¶®‡¶ó‡¶¶ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®:")

        @dp.message_handler(lambda message: message.chat.id == call.from_user.id)
        async def get_number(msg: types.Message):
            data = load_db()
            u = data["users"][uid]
            await bot.send_message(ADMIN_ID, f"üì• ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü:\n\nUser: {msg.from_user.full_name}\nID: {msg.from_user.id}\nNumber: {msg.text}\nAmount: {u.get('balance')} ‡¶ü‡¶æ‡¶ï‡¶æ")
            u["balance"] = 0
            save_db(data)
            await msg.answer("‚úÖ ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

@dp.callback_query_handler(lambda c: c.data == "notice")
async def notice(call: types.CallbackQuery):
    await call.message.edit_text("üìå ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶•‡¶æ‡¶ï‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Æ‡ßá‡¶®‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

@dp.callback_query_handler(lambda c: c.data == "support")
async def support(call: types.CallbackQuery):
    await call.message.edit_text("üÜò ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®:\n@CashShortcutAdmin")

@dp.callback_query_handler(lambda c: c.data == "free100")
async def free100(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    if uid in data["claimed_100"]:
        await call.message.edit_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶á ‡¶Ö‡¶´‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")
        return

    img_url = "https://i.postimg.cc/9Fw3SnvV/i-m-rich-portrait-young-freelancer-businessman-home-office-throws-cash-successful-deal-earnings-onli.jpg"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üåê Go To Web", url="https://invest-sure.netlify.app/"),
        InlineKeyboardButton("‚úÖ Submit", callback_data="submit100")
    )
    await bot.send_photo(chat_id=call.from_user.id, photo=img_url)
    await call.message.answer("""
üîî ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ üîî
‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá "Go To Web" ‡¶è ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶∞‡¶™‡¶∞‡¶á ‡¶§‡¶•‡ßç‡¶Ø Submit ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‚úÖ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Æ‡ßá‡¶®‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®‡•§
""", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "submit100")
async def submit100(call: types.CallbackQuery):
    data = load_db()
    uid = str(call.from_user.id)
    if uid in data["claimed_100"]:
        await call.message.edit_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡ßç‡¶≤‡ßá‡¶á‡¶Æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")
        return
    data["claimed_100"].append(uid)
    data["users"][uid]["balance"] += 50
    save_db(data)
    await call.message.edit_text("‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

# ‚úÖ Start Bot
if __name__ == "__main__":
    keep_alive()  # Replit/online hosting support (must be defined in keep_alive.py)
    loop = asyncio.get_event_loop()

    async def main():
        print("ü§ñ Bot is starting...")
        await dp.start_polling()

    loop.create_task(main())
    loop.run_forever()
